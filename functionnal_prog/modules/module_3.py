"""Exercices sur module_3.donnes_iterables"""
import math
from itertools import chain
from itertools import combinations
from itertools import groupby
from itertools import islice
from itertools import product


def grouper_produits(object_to_group):
    """
    Soit une liste de couples (cat√©gorie, produit) telle que celle d√©finie dans le contexte de cet exercice.
    On vous demande d'√©crire une fonction nomm√©e grouper_produits qui √† partir d'une telle liste produit en sortie
    une nouvelle liste de couples (cat√©gorie, tuple de produits), o√π chaque cat√©gorie n'appara√Æt qu'une seule fois.
    """

    def data_type(data_tupple):
        return data_tupple[0]

    return [(key, tuple(x[1] for x in group))
            for key, group in groupby(sorted(object_to_group), key=data_type)]



villes = [
    ("Uneville", 4, 10),
    ("Villeautre", 10, 15),
    ("Id√©edeville", 20, 2),
    ("Encoreuneville", 14, 14)
]


def calculer_distances(liste_de_villes):
    """
    Soit une liste de villes telle que celle donn√©e en exemple dans le contexte de cet exercice. Chaque triplet de cette liste comporte le nom d'une ville ainsi que les coordonn√©es (ùë•,ùë¶)
    de son emplacement sur la carte.

    On vous demande d'√©crire une fonction nomm√©e calculer_distances qui accepte en argument une telle liste de villes et qui retourne en sortie une nouvelle liste de triplets pour chaque combinaison de deux villes. Les triplets de sortie doivent comporter les information suivantes‚Äà:

        le nom d'une premi√®re ville
        le nom d'une seconde ville
        la distance entre les deux villes en question.
    """

    def distance(x1, x2, y1, y2):
        """Calculer la distance entre les coordonn√©es (x1, y1) et (x2, y2)."""
        return math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2))

    def calculer_distance(tuple_de_villes):
        return (tuple_de_villes[0][0], tuple_de_villes[1][0],
                distance(tuple_de_villes[0][1],
                         tuple_de_villes[1][1],
                         tuple_de_villes[0][2],
                         tuple_de_villes[1][2]))

    return [calculer_distance(x) for x in list(combinations(liste_de_villes, 2))]


def calculer_factures(*args):
    """
    Un groupe d'amis part en vacances et d√©cide de partager toutes leurs d√©penses.
    Les d√©penses de chacun sont conserv√©es dans trois it√©rables de montants (voir cellule de contexte).

    L'un des membres du groupe n'ayant pas beaucoup d'argent, le groupe d√©cide de lui faire une faveur:
    il ne payerera que les 15 factures les moins ch√®res parmi toutes les factures r√©unies.

    Retournez le montant total des factures qu'il devra payer.
    """
    return sum(islice(sorted(chain(*args)), 15))


def damier(lignes, colonnes):
    """
    L'objectif de cet exercice est d'initialiser un damier tel que ci-contre.

    Dans le contexte de cet exercice, nous vous donnons des it√©rables pour les lignes et les colonnes du damier:

        les lignes sont repr√©sent√©es par des chiffres de 1 √† 10 (du bas vers le haut)
    les colonnes par des lettres de ùëé √† ùëó(de gauche √† droite).

    D√©finissez une fonction damier qui renvoie le plateau dans le contexte d'un d√©but de partie, prenant en argument les listes lignes et colonnes correspondant aux indices donn√©s √† ces derni√®res.
    Cette fonction renverra un dictionnaire qui accepte comme cl√© un tuple (ligne, colonne), par exemple : (1, "a")
    et associez √† chacune de ces cases les valeurs 'blanc', 'noir' ou None selon la couleur du jeton de la case de la case.

    Pour r√©soudre cet exercice, faites une boucle sur le produit (voir product) des deux it√©rables lignes et colonne.
    """

    def couleur(case):
        """Retourner la couleur de la case; None si vide."""
        ligne, colonne = case

        def is_white():
            return (colonne in 'acegi' and ligne in (1, 3)) or (colonne not in 'acegi' and ligne in (2, 4))

        def is_black():
            return (colonne in 'acegi' and ligne in (7, 9)) or (colonne not in 'acegi' and ligne in (8, 10))

        return 'blanc' if is_white() else 'noir' if is_black() else None

    return {key: couleur(key) for key in product(lignes, colonnes)}
